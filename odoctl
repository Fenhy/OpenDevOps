#!/bin/bash
#set -ex
COMPOSE_YAML='docker-compose.yaml'
COMPOSE_PROJECT='odo'
DOCKER_COMPOSE="docker-compose --compatibility -f ${COMPOSE_YAML} -p ${COMPOSE_PROJECT}"
COMPOSE_CMD="${1-''}"
COMPOSE_SVC="${2-''}"
PRODUCT_ID="${3}"
ODO_INIT_PG='yes'
ODO_INIT_LDAP='yes'
ODO_INIT_JENKINS='yes'
ODO_INIT_SONAR='yes'

function help_doc_cmd
{
    cat <<EOF
$0 <COMMAND>:
    start     - Up container(s) to start service(s)
    stop      - Stop container(s) to stop service(s)
    down      - Down all services
    restart   - Restart container(s) to restart service(s)
    list      - List container(s)
    license   - Generate JIRA/Confluence/Plugin license
    cleanup   - Cleanup all containers and dirs
EOF
    exit 1
}

function help_doc_svc
{
    cat <<EOF
$0 ${COMPOSE_CMD} <SERVICE>:
    all       - All Services
    ldap      - OpenLDAP, PhpLDAPAdmin and Self Service Password
    pg        - PostgresQL
    jira      - Jira Software
    conf      - Confluence
    sonar     - SonarQube Community Edition
    jenkins   - Jenkins
    gitlab    - GitLab Community Edition
    harbor    - Harbor [Not Support]
    rancher   - Rancher
    jms       - JumpServer
    portal    - DevOps Portal
EOF
    exit 1
}

function help_doc_license
{
    cat <<EOF
$0 ${COMPOSE_CMD} <PRODUCT>:
    jira          - Generate JIRA software license
    jira_plugin   - Generate JIRA plugin license
    conf          - Generate Confluence server license
    conf_plugin   - Generate Confluence plugin license
    jenkins       - Get Jenkins initialAdminPassword
EOF
    exit 1
}

function help_doc_license_pid
{
    cat <<EOF
$0 ${COMPOSE_CMD} ${COMPOSE_SVC} <PRODUCT_ID>:
    PRODUCT_ID is REQUIRED
      +-------------+------------+------------------------------------+
      | PRODUCT     | PRODUCT_ID | WHERE                              |
      +-------------+------------+------------------------------------+
      | jira_plugin | plugin ID  | JIRA application detail page       |
      +-------------+------------+------------------------------------+
      | conf        | server ID  | Confluence installation page       |
      +-------------+------------+------------------------------------+
      | conf_plugin | plugin ID  | Confluence application detail page |
      +-------------+------------+------------------------------------+
EOF
    exit 0
}

function check_env
{
    [[ -f /etc/selinux/config ]] && {
        [[ "$(getenforce)" == "Enforcing" ]] && setenforce 0
        sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config
    }
    for _tool in "docker" "docker-compose"
    do
        output=$(${_tool} --version 2>&1) || {
            echo -e "\033[33;6m${_tool} is required in this machine \033[0m"
            echo "${output}"
            exit 1
        }
    done
}

function check_odo_cli
{
    echo "start stop down restart list license cleanup" | grep -qw "${COMPOSE_CMD}" || help_doc_cmd
    if [[ "${COMPOSE_CMD}" == "license" ]]; then
        echo "jira jira_plugin conf conf_plugin jenkins" | grep -qw "${COMPOSE_SVC}" || help_doc_license
        [[ "${COMPOSE_SVC}" == "jira" ]] && return 0
        [[ "${COMPOSE_SVC}" == "jenkins" ]] && return 0
        [[ -z "${PRODUCT_ID}" ]] && help_doc_license_pid
    elif [[ "${COMPOSE_CMD}" == "list" ]]; then
        return 0
    elif [[ "${COMPOSE_CMD}" == "cleanup" ]]; then
        return 0
    elif [[ "${COMPOSE_CMD}" == "down" ]]; then
        return 0
    else
        echo "all ldap pg jira conf sonar jenkins gitlab rancher jms portal" | grep -qw "${COMPOSE_SVC}" || help_doc_svc
    fi
    return 0
}

function check_odo_svc
{
    if [[ "${COMPOSE_SVC}" == "all" ]]; then
        COMPOSE_SVC=""
    elif [[ "${COMPOSE_SVC}" == "ldap" ]]; then
        COMPOSE_SVC="odo-ldap-openldap odo-ldap-phpldapadmin odo-ldap-ssp"
    else
        [[ "${COMPOSE_CMD}" == "license" ]] || COMPOSE_SVC="odo-${COMPOSE_SVC}"
    fi
}

function create_db_for_odo
{
    while true
    do
        sleep 1
        #docker exec -it odo-mysql bash -c "mysql -uroot -popendevops -e 'show full processlist;'" && break
        docker exec -it odo-pg psql -U postgres -l && break
    done
    #docker exec -it odo-mysql bash -c "mysql -uroot -popendevops -e 'CREATE DATABASE IF NOT EXISTS jira DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_bin;'"
    #docker exec -it odo-mysql bash -c "mysql -uroot -popendevops -e 'CREATE DATABASE IF NOT EXISTS conf DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_bin;'"
    #docker exec -it odo-mysql bash -c "mysql -uroot -popendevops -e 'CREATE DATABASE IF NOT EXISTS sonar DEFAULT CHARSET utf8 COLLATE utf8_bin;'"
    db_list=$(docker exec -it odo-pg psql -U postgres -l)
    for db_name in jira conf sonar
    do
        echo "${db_list}" | grep $db_name || docker exec -it odo-pg createdb -U postgres $db_name
    done
    docker exec -it odo-pg psql -U postgres -l
}

function chmod_dir
{
    dir_name=$1
    while true
    do
        sleep 1
        [[ -d ${dir_name} ]] && break
    done
    chmod -R 777 ${dir_name}
}

function set_host_for_sonar
{
    chmod -R 777 odo-sonar
    [[ "$(uname)" == "Linux" ]] && {
        sysctl -w vm.max_map_count=262144
        sysctl -w fs.file-max=65536
        ulimit -n 65536
        ulimit -u 4096
    }
}

function check_odo_exist
{
    [[ -d odo-pg ]] && ODO_INIT_PG='no'
    [[ -d odo-ldap/db ]] && ODO_INIT_LDAP='no'
    [[ -d odo-jenkins ]] && ODO_INIT_JENKINS='no'
    [[ -d odo-sonar/data ]] && ODO_INIT_SONAR='no'
    return 0
}

## Main
check_env
check_odo_cli
check_odo_svc
check_odo_exist
if [[ "${COMPOSE_CMD}" == "start" ]]; then
    if [[ "${COMPOSE_SVC}" == "" ]]; then
        [[ "${ODO_INIT_JENKINS}" == "yes" ]] && set_host_for_sonar
    else
        echo "${COMPOSE_SVC}" | grep "sonar" && {
            [[ "${ODO_INIT_JENKINS}" == "yes" ]] && set_host_for_sonar
        }
    fi
    ${DOCKER_COMPOSE} pull ${COMPOSE_SVC}
    ${DOCKER_COMPOSE} up -d ${COMPOSE_SVC}
    if [[ "${COMPOSE_SVC}" == "" ]]; then
        [[ "${ODO_INIT_JENKINS}" == "yes" ]] && chmod_dir odo-jenkins
        [[ "${ODO_INIT_PG}" == "yes" ]] && create_db_for_odo
        [[ "${ODO_INIT_SONAR}" == "yes" ]] && chmod_dir odo-sonar
    else
        #echo "${COMPOSE_SVC}" | grep "mysql" && create_db_for_odo
        echo "${COMPOSE_SVC}" | grep "pg" && {
            [[ "${ODO_INIT_PG}" == "yes" ]] && create_db_for_odo
        }
        echo "${COMPOSE_SVC}" | grep "jenkins" && {
            [[ "${ODO_INIT_JENKINS}" == "yes" ]] && chmod_dir odo-jenkins
        }
        echo "${COMPOSE_SVC}" | grep "sonar" && {
            [[ "${ODO_INIT_SONAR}" == "yes" ]] && chmod_dir odo-sonar
        }
    fi
    sleep 2
    ${DOCKER_COMPOSE} ps
elif [[ "${COMPOSE_CMD}" == "stop" ]]; then
    ${DOCKER_COMPOSE} stop ${COMPOSE_SVC}
    sleep 2
    ${DOCKER_COMPOSE} ps
elif [[ "${COMPOSE_CMD}" == "restart" ]]; then
    ${DOCKER_COMPOSE} restart ${COMPOSE_SVC}
    sleep 2
    ${DOCKER_COMPOSE} ps
elif [[ "${COMPOSE_CMD}" == "list" ]]; then
    ${DOCKER_COMPOSE} ps
elif [[ "${COMPOSE_CMD}" == "down" ]]; then
    ${DOCKER_COMPOSE} down
    sleep 2
    ${DOCKER_COMPOSE} ps
elif [[ "${COMPOSE_CMD}" == "license" ]]; then
    if [[ "${COMPOSE_SVC}" == "jira" ]]; then
        docker exec -it odo-jira getJiraLicense
    elif [[ "${COMPOSE_SVC}" == "jira_plugin" ]]; then
        docker exec -it odo-jira getPluginLicense ${PRODUCT_ID}
    elif [[ "${COMPOSE_SVC}" == "conf" ]]; then
        docker exec -it odo-conf getConfLicense ${PRODUCT_ID}
    elif [[ "${COMPOSE_SVC}" == "conf_plugin" ]]; then
        docker exec -it odo-conf getPluginLicense ${PRODUCT_ID}
    elif [[ "${COMPOSE_SVC}" == "jenkins" ]]; then
        docker exec -it odo-jenkins sh -c 'cat /var/jenkins_home/secrets/initialAdminPassword'
    fi
elif [[ "${COMPOSE_CMD}" == "cleanup" ]]; then
    echo -e "\033[31;6m [ DANGER ] This action will wipe all ODO data\033[0m"
    read -p "Do you really wanna do this? [y/N] " _CLEANUP
    [[ "${_CLEANUP,,}" == 'y' ]] || {
        echo "Abort cleanup"
        exit 1
    }
    ${DOCKER_COMPOSE} down
    sleep 2
    ${DOCKER_COMPOSE} ps
    [[ -f .gitignore ]] && {
        for clean_dir in $(grep 'odo-' .gitignore | grep -v '#')
        do
            rm -rf ${clean_dir}
        done
    }
fi
